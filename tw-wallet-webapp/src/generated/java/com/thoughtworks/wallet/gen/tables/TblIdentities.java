/*
 * This file is generated by jOOQ.
 */
package com.thoughtworks.wallet.gen.tables;


import com.thoughtworks.wallet.gen.Indexes;
import com.thoughtworks.wallet.gen.Keys;
import com.thoughtworks.wallet.gen.Public;
import com.thoughtworks.wallet.gen.tables.records.TblIdentitiesRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TblIdentities extends TableImpl<TblIdentitiesRecord> {

    private static final long serialVersionUID = -863516911;

    /**
     * The reference instance of <code>public.tbl_identities</code>
     */
    public static final TblIdentities TBL_IDENTITIES = new TblIdentities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TblIdentitiesRecord> getRecordType() {
        return TblIdentitiesRecord.class;
    }

    /**
     * The column <code>public.tbl_identities.hash</code>.
     */
    public final TableField<TblIdentitiesRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_identities.tx_type</code>.
     */
    public final TableField<TblIdentitiesRecord, String> TX_TYPE = createField(DSL.name("tx_type"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tbl_identities.create_time</code>.
     */
    public final TableField<TblIdentitiesRecord, OffsetDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.tbl_identities.height</code>.
     */
    public final TableField<TblIdentitiesRecord, Long> HEIGHT = createField(DSL.name("height"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tbl_identities.initiator</code>.
     */
    public final TableField<TblIdentitiesRecord, String> INITIATOR = createField(DSL.name("initiator"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_identities.owner_address</code>.
     */
    public final TableField<TblIdentitiesRecord, String> OWNER_ADDRESS = createField(DSL.name("owner_address"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_identities.did</code>.
     */
    public final TableField<TblIdentitiesRecord, String> DID = createField(DSL.name("did"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_identities.public_key</code>.
     */
    public final TableField<TblIdentitiesRecord, String> PUBLIC_KEY = createField(DSL.name("public_key"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_identities.name</code>.
     */
    public final TableField<TblIdentitiesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_identities.tx_index</code>.
     */
    public final TableField<TblIdentitiesRecord, Long> TX_INDEX = createField(DSL.name("tx_index"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tbl_identities.contract_hash</code>.
     */
    public final TableField<TblIdentitiesRecord, String> CONTRACT_HASH = createField(DSL.name("contract_hash"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.tbl_identities</code> table reference
     */
    public TblIdentities() {
        this(DSL.name("tbl_identities"), null);
    }

    /**
     * Create an aliased <code>public.tbl_identities</code> table reference
     */
    public TblIdentities(String alias) {
        this(DSL.name(alias), TBL_IDENTITIES);
    }

    /**
     * Create an aliased <code>public.tbl_identities</code> table reference
     */
    public TblIdentities(Name alias) {
        this(alias, TBL_IDENTITIES);
    }

    private TblIdentities(Name alias, Table<TblIdentitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TblIdentities(Name alias, Table<TblIdentitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TblIdentities(Table<O> child, ForeignKey<O, TblIdentitiesRecord> key) {
        super(child, key, TBL_IDENTITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TBL_IDENTITIES_HASH_INDEX);
    }

    @Override
    public UniqueKey<TblIdentitiesRecord> getPrimaryKey() {
        return Keys.TBL_IDENTITIES_PKEY;
    }

    @Override
    public List<UniqueKey<TblIdentitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<TblIdentitiesRecord>>asList(Keys.TBL_IDENTITIES_PKEY);
    }

    @Override
    public TblIdentities as(String alias) {
        return new TblIdentities(DSL.name(alias), this);
    }

    @Override
    public TblIdentities as(Name alias) {
        return new TblIdentities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TblIdentities rename(String name) {
        return new TblIdentities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TblIdentities rename(Name name) {
        return new TblIdentities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, OffsetDateTime, Long, String, String, String, String, String, Long, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
