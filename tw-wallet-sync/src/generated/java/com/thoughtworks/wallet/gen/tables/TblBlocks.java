/*
 * This file is generated by jOOQ.
 */
package com.thoughtworks.wallet.gen.tables;


import com.thoughtworks.wallet.gen.Keys;
import com.thoughtworks.wallet.gen.Public;
import com.thoughtworks.wallet.gen.tables.records.TblBlocksRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TblBlocks extends TableImpl<TblBlocksRecord> {

    private static final long serialVersionUID = -1825776659;

    /**
     * The reference instance of <code>public.tbl_blocks</code>
     */
    public static final TblBlocks TBL_BLOCKS = new TblBlocks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TblBlocksRecord> getRecordType() {
        return TblBlocksRecord.class;
    }

    /**
     * The column <code>public.tbl_blocks.height</code>.
     */
    public final TableField<TblBlocksRecord, Long> HEIGHT = createField(DSL.name("height"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tbl_blocks.hash</code>.
     */
    public final TableField<TblBlocksRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_blocks.create_time</code>.
     */
    public final TableField<TblBlocksRecord, OffsetDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.tbl_blocks</code> table reference
     */
    public TblBlocks() {
        this(DSL.name("tbl_blocks"), null);
    }

    /**
     * Create an aliased <code>public.tbl_blocks</code> table reference
     */
    public TblBlocks(String alias) {
        this(DSL.name(alias), TBL_BLOCKS);
    }

    /**
     * Create an aliased <code>public.tbl_blocks</code> table reference
     */
    public TblBlocks(Name alias) {
        this(alias, TBL_BLOCKS);
    }

    private TblBlocks(Name alias, Table<TblBlocksRecord> aliased) {
        this(alias, aliased, null);
    }

    private TblBlocks(Name alias, Table<TblBlocksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TblBlocks(Table<O> child, ForeignKey<O, TblBlocksRecord> key) {
        super(child, key, TBL_BLOCKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TblBlocksRecord> getPrimaryKey() {
        return Keys.TBL_BLOCKS_PKEY;
    }

    @Override
    public List<UniqueKey<TblBlocksRecord>> getKeys() {
        return Arrays.<UniqueKey<TblBlocksRecord>>asList(Keys.TBL_BLOCKS_PKEY);
    }

    @Override
    public TblBlocks as(String alias) {
        return new TblBlocks(DSL.name(alias), this);
    }

    @Override
    public TblBlocks as(Name alias) {
        return new TblBlocks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TblBlocks rename(String name) {
        return new TblBlocks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TblBlocks rename(Name name) {
        return new TblBlocks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
