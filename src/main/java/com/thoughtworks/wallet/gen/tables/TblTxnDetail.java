/*
 * This file is generated by jOOQ.
 */
package com.thoughtworks.wallet.gen.tables;


import com.thoughtworks.wallet.gen.Keys;
import com.thoughtworks.wallet.gen.Public;
import com.thoughtworks.wallet.gen.tables.records.TblTxnDetailRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TblTxnDetail extends TableImpl<TblTxnDetailRecord> {

    private static final long serialVersionUID = 1923620448;

    /**
     * The reference instance of <code>public.tbl_txn_detail</code>
     */
    public static final TblTxnDetail TBL_TXN_DETAIL = new TblTxnDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TblTxnDetailRecord> getRecordType() {
        return TblTxnDetailRecord.class;
    }

    /**
     * The column <code>public.tbl_txn_detail.txn_hash</code>.
     */
    public final TableField<TblTxnDetailRecord, String> TXN_HASH = createField(DSL.name("txn_hash"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_txn_detail.txn_type</code>.
     */
    public final TableField<TblTxnDetailRecord, Short> TXN_TYPE = createField(DSL.name("txn_type"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.tbl_txn_detail.txn_time</code>.
     */
    public final TableField<TblTxnDetailRecord, LocalDateTime> TXN_TIME = createField(DSL.name("txn_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.tbl_txn_detail.height</code>.
     */
    public final TableField<TblTxnDetailRecord, Integer> HEIGHT = createField(DSL.name("height"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<TblTxnDetailRecord, Object> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"money\"").nullable(false), this, "");

    /**
     * The column <code>public.tbl_txn_detail.asset_name</code>.
     */
    public final TableField<TblTxnDetailRecord, String> ASSET_NAME = createField(DSL.name("asset_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_txn_detail.from_address</code>.
     */
    public final TableField<TblTxnDetailRecord, String> FROM_ADDRESS = createField(DSL.name("from_address"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_txn_detail.to_address</code>.
     */
    public final TableField<TblTxnDetailRecord, String> TO_ADDRESS = createField(DSL.name("to_address"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tbl_txn_detail.block_index</code>.
     */
    public final TableField<TblTxnDetailRecord, Integer> BLOCK_INDEX = createField(DSL.name("block_index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tbl_txn_detail.txn_index</code>.
     */
    public final TableField<TblTxnDetailRecord, Integer> TXN_INDEX = createField(DSL.name("txn_index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tbl_txn_detail.confirm_flag</code>.
     */
    public final TableField<TblTxnDetailRecord, Short> CONFIRM_FLAG = createField(DSL.name("confirm_flag"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.tbl_txn_detail.event_type</code>.
     */
    public final TableField<TblTxnDetailRecord, Short> EVENT_TYPE = createField(DSL.name("event_type"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.tbl_txn_detail.contract_hash</code>.
     */
    public final TableField<TblTxnDetailRecord, String> CONTRACT_HASH = createField(DSL.name("contract_hash"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("''''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.tbl_txn_detail</code> table reference
     */
    public TblTxnDetail() {
        this(DSL.name("tbl_txn_detail"), null);
    }

    /**
     * Create an aliased <code>public.tbl_txn_detail</code> table reference
     */
    public TblTxnDetail(String alias) {
        this(DSL.name(alias), TBL_TXN_DETAIL);
    }

    /**
     * Create an aliased <code>public.tbl_txn_detail</code> table reference
     */
    public TblTxnDetail(Name alias) {
        this(alias, TBL_TXN_DETAIL);
    }

    private TblTxnDetail(Name alias, Table<TblTxnDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private TblTxnDetail(Name alias, Table<TblTxnDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TblTxnDetail(Table<O> child, ForeignKey<O, TblTxnDetailRecord> key) {
        super(child, key, TBL_TXN_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TblTxnDetailRecord> getPrimaryKey() {
        return Keys.TBL_TXN_DETAIL_PKEY;
    }

    @Override
    public List<UniqueKey<TblTxnDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<TblTxnDetailRecord>>asList(Keys.TBL_TXN_DETAIL_PKEY);
    }

    @Override
    public TblTxnDetail as(String alias) {
        return new TblTxnDetail(DSL.name(alias), this);
    }

    @Override
    public TblTxnDetail as(Name alias) {
        return new TblTxnDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TblTxnDetail rename(String name) {
        return new TblTxnDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TblTxnDetail rename(Name name) {
        return new TblTxnDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, Short, LocalDateTime, Integer, Object, String, String, String, Integer, Integer, Short, Short, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
